(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{301:function(t,a,v){"use strict";v.r(a);var _=v(14),s=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"时间复杂度与空间复杂度科普"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度与空间复杂度科普"}},[t._v("#")]),t._v(" 时间复杂度与空间复杂度科普")]),t._v(" "),a("p",[t._v("单位:")]),t._v(" "),a("ul",[a("li",[t._v("o(1) 代表执行了一次，例如平常的代码，没有循环等")]),t._v(" "),a("li",[t._v("o(n) 代表传入多少就执行多少次")]),t._v(" "),a("li",[t._v("o(n^2) 代表传入多少就执行多少的 2 次方")]),t._v(" "),a("li",[t._v("o(logn) 代表执行 n 的平方根次，比如传入 4 则执行 2 次,传入 16 则执行 4 次")]),t._v(" "),a("li",[t._v("o(nlogn) 代表执行 n * logn 次，查看上文")])]),t._v(" "),a("h2",{attrs:{id:"数量级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数量级"}},[t._v("#")]),t._v(" 数量级")]),t._v(" "),a("p",[t._v("我们把数量级相差不多的列为同一个复杂度，比如一个算法的时间按复杂度为 o(1) 或 o(2) 或 o(10) 我们都认为时间复杂度为 o(1)")]),t._v(" "),a("p",[t._v("同理 o(n) 跟 o(2n) 也是认为他是 o(n) 即可")]),t._v(" "),a("h2",{attrs:{id:"时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),a("p",[t._v("比如一个函数里面执行的循环次数，如果没有循环，则时间复杂度为 o(1)")]),t._v(" "),a("p",[t._v("如果有循环，则看看传入的参数与循环次数来对比推算出相应的时间复杂度")]),t._v(" "),a("h2",{attrs:{id:"空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度"}},[t._v("#")]),t._v(" 空间复杂度")]),t._v(" "),a("p",[t._v("空间复杂度指的是占用的空间，比如一个函数里面执行所需要的内存空间")]),t._v(" "),a("p",[t._v("传入的参数与所用的空间来推断相应的空间复杂度")]),t._v(" "),a("blockquote",[a("p",[t._v("上面的文字描述可能有点抽象，要是看不懂，请看后面的例子")])]),t._v(" "),a("h2",{attrs:{id:"例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),a("h2",{attrs:{id:"注意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),a("p",[t._v("前端重时间轻空间，意思是优先减少时间复杂度，因为页面渲染越快越好")])])}),[],!1,null,null,null);a.default=s.exports}}]);